 all the commands of git are case sensitive

 // this command is used to check the version og git 
git --version  (or)  git version 
o/p :  git version 2.42.0.windows.2
output will be same for both the commands 
 
 ---------------------------------------------------------------------------------------------------------------------------------------
 
 // if we want to see the list of commands use "git help" command 
 $ git help
usage: git [-v | --version] [-h | --help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--config-env=<name>=<envvar>] <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.


// will  give the documentation of the command in the browser.
git help command 

-----------------------------------------------------------------------------------------------------------------------------------------
git config 
// it is used when the git software is used for the first time
this  command will set the user identity like email , email , password etc.
this configuration information is used by the git software for every  push operation encountered

--------------------------------------------------------------------------------------------------------------------------------------------------
// this command is used to provide the list of configuration along with path of gitconfig file 
in this case it is already configured , since name and email are visible if we want to delete , go to the gitcofig path in the user.name and remove the file 
and type this command again and check this time username and email will not present

$ git config --list --show-origin
file:C:/Program Files/Git/etc/gitconfig diff.astextplain.textconv=astextplain
file:C:/Program Files/Git/etc/gitconfig filter.lfs.clean=git-lfs clean -- %f
file:C:/Program Files/Git/etc/gitconfig filter.lfs.smudge=git-lfs smudge -- %f
file:C:/Program Files/Git/etc/gitconfig filter.lfs.process=git-lfs filter-process
file:C:/Program Files/Git/etc/gitconfig filter.lfs.required=true
file:C:/Program Files/Git/etc/gitconfig http.sslbackend=openssl
file:C:/Program Files/Git/etc/gitconfig http.sslcainfo=C:/Program Files/Git/mingw64/etc/ssl/certs/ca-bundle.crt
file:C:/Program Files/Git/etc/gitconfig core.autocrlf=true
file:C:/Program Files/Git/etc/gitconfig core.fscache=true
file:C:/Program Files/Git/etc/gitconfig core.symlinks=false
file:C:/Program Files/Git/etc/gitconfig pull.rebase=false
file:C:/Program Files/Git/etc/gitconfig credential.helper=manager
file:C:/Program Files/Git/etc/gitconfig credential.https://dev.azure.com.usehttppath=true
file:C:/Program Files/Git/etc/gitconfig init.defaultbranch=master
file:C:/Users/Administrator/.gitconfig  user.name=pavan-png
file:C:/Users/Administrator/.gitconfig  user.email=mohanpavankalyan52@gmail.com

-------------------------------------------------------------------------------------------------------------------------
// this command is used to provide the list of configuration

$ git config --list
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/etc/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
pull.rebase=false
credential.helper=manager
credential.https://dev.azure.com.usehttppath=true
init.defaultbranch=master
user.name=pavan-png
user.email=mohanpavankalyan52@gmail.com

---------------------------------------------------------------------------------------------------------------------------------

// to set the username and email use command 

$ git config --global user.name "pavan-png"
$ git config --global user.email "mohanpavankalyan52@gmail.com"
// global means user can work with git commands from different drives of a computer 


// after executing this command if you want to check whether the username and email is added use command

git config --list 
     (or)
git config --list  --show-origin
// we should able to see the username and our email which is added

------------------------------------------------------------------------------------------------------------------------------------------

$ git init
Initialized empty Git repository in C:/Users/Administrator/IdeaProjects/.git/

// normally user create a folder to keep the  source code at some particular path 
using git bash navigate to that path where the source code of the user is present and execute this command 
this will create a .git folder at the path , which is used by the git software to identify which folder is
participating in the pushing to local and remote repositories.
by default .git is a hidden folder

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

$ pwd
/c/users/administrator/ideaprojects

// to check which directory we are currently present in this command is used

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

git status 
// this command is used to check the status of the current working directory

git status normally give outputs in the following ways :
untracked files - it means the files are present in working area / workspace and these files can be moved only to stage area.
tracked files - it means the files are present in stage area and ready to be comitted to local and remote repositiries.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


$git add filename   
// to move single file from workspace to stage area

$git add .
// to  move all files from workspace to stage area at a time

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------

$ git rm  --cached filename
// to unstage single file from stage area to workspace

$git rm --cached .
// to unstage all files from stage area to workspace

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

git restore filename
// if changes are done to the same file  after the file is moved to stage area and you dont want that changes to be updated you can use this command 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// if you want to update the change to the file in stage area again use the command 
$ git add 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

$git commit -m " some message "
//this command is used to move all the files from stage area to local repository

$git commit -m "some message " file name
// this command is used to move single file from stage area to local repository 


------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// to push the files to remote repository we use following commands 

$git branch -M main

$git remote add origin <url>

$git push -u origin main 

-------------------------------------------------------------------------------------------------------------------------------------------------------

 pull -> this command is used to fetch the latest changes made in remote repository to working directory.
$git pull 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
clone -> it is used to clone the repository to the working directory of the user
$ git clone <url> 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------


$ git remote add origin https://github.com/pavan-png/Java_Full_Stack_Pratice.git
error: remote origin already exists.

// if this occurs when we want to upload a fille/directory to new repository  .
// first check below command to which origin it is linked . if it doesnt show the path set the path you need by below command
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

$ git remote --verbose
origin  https://github.com/pavan-png/Java_Full_Stack_Pratice.git (fetch)
origin  https://github.com/pavan-png/Java_Full_Stack_Pratice.git (push)

//checks  connected github account and repository
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

$ git remote set-url origin https://github.com/pavan-png/Java_Full_Stack_Pratice.git

// the set url is used to set the new path 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// updates were rejected because the remote contains work that you do not have locally
solution
git fetch origin main

git merge origin/main
// after that use you can push to repository 

now repeat commands from git add to push every thing will be alright. 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------tgu

error: src refspec main does not match any
error: failed to push some refs to 'https://github.com/pavan-png/UI-Technologies.git'

if files are not added to stage area and we tried to commit then this  error arises 
solution :  add the files to stage area  using command git add.

// if files are changed and new file with same name is replaced in the main directory ( local pc) then 
no error , if folders are changed then error arises even though replaced with same name
--------------------------------------------------------------------------------------------------------------------------------------------------------
git push --force-with-lease
// used to update remote repository with the local commits 
-----------------------------------------------------------------------------------------------------------------------------------------------